
// src/lib/voucherUtils.ts
import type { CreditVoucher } from '@/services/voucher-service'; // Assuming CreditVoucher is exported
import jsPDF from 'jspdf';
import { format, parseISO } from 'date-fns';

/**
 * Generates a random alphanumeric voucher code.
 * Format: 8 random uppercase alphanumeric characters.
 */
export function generateVoucherCode(length: number = 8): string {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

/**
 * Generates a random Batch ID.
 * Format: "B-" followed by 6 random uppercase alphanumeric characters.
 */
export function generateBatchId(): string {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = 'B-';
  for (let i = 0; i < 6; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}


/**
 * Generates a PDF with voucher slips for a given batch of vouchers.
 * @param vouchersToDownload Array of CreditVoucher objects for the batch.
 * @param teacherDisplayName The display name of the teacher generating the vouchers.
 * @param batchId The Batch ID for these vouchers.
 * @param toastFunction Function to display toast messages (e.g., from useToast).
 */
export function generateVoucherSlipsPDF(
  vouchersToDownload: CreditVoucher[],
  teacherDisplayName: string,
  batchId: string,
  toastFunction: (options: { title: string; description?: string; variant?: 'default' | 'destructive' }) => void
): void {
  if (!vouchersToDownload || vouchersToDownload.length === 0) {
    toastFunction({ variant: "destructive", title: "No Vouchers", description: "No vouchers available to generate PDF for this batch." });
    return;
  }

  try {
    const doc = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
    const generationTimestamp = new Date();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 15;
    let yPos = margin;

    // PDF Header
    doc.setFontSize(18);
    doc.setTextColor(0,0,0);
    doc.text("EduCore AI - Student Credit Vouchers", pageWidth / 2, yPos, { align: 'center' });
    yPos += 7;
    doc.setFontSize(12);
    doc.text(`Batch ID: ${batchId}`, pageWidth / 2, yPos, {align: 'center'});
    yPos += 6;
    doc.setFontSize(10);
    doc.text(`Generated By: ${teacherDisplayName}`, pageWidth / 2, yPos, { align: 'center' });
    yPos += 5;
    doc.text(`Generated At: ${format(generationTimestamp, 'PPP p')}`, pageWidth / 2, yPos, { align: 'center' });
    yPos += 5;
    const firstVoucher = vouchersToDownload[0];
    if (firstVoucher.restrictedToClassName) {
      doc.text(`Batch Restriction: For Class ${firstVoucher.restrictedToClassName}${firstVoucher.restrictedToFriendlyClassId ? ` (ID: ${firstVoucher.restrictedToFriendlyClassId})` : ''}`, pageWidth / 2, yPos, { align: 'center' });
      yPos += 5;
    }
    yPos += 2;
    
    doc.setFontSize(9);
    doc.setTextColor(50, 50, 50);
    const instructions = "Instructions: Cut along the dotted lines. If a voucher is for a specific class, ensure you are enrolled in it (join using the Class ID on the 'Classes' page). Redeem any voucher by entering its code on the 'Classes' page.";
    const splitInstructions = doc.splitTextToSize(instructions, pageWidth - 2 * margin);
    doc.text(splitInstructions, margin, yPos);
    yPos += (splitInstructions.length * 4) + 5; // Adjust spacing based on number of instruction lines

    const slipWidth = (pageWidth - 2 * margin - 5) / 2; // 2 slips per row with a 5mm gap
    const slipHeight = firstVoucher.restrictedToClassName ? 65 : 55; // Adjusted height
    const slipsPerPage = Math.floor((doc.internal.pageSize.getHeight() - yPos - margin) / (slipHeight + 5)) * 2;
    let slipsOnCurrentPage = 0;
    let currentX = margin;

    vouchersToDownload.forEach((voucher) => {
      if (slipsOnCurrentPage >= slipsPerPage || yPos + slipHeight > doc.internal.pageSize.getHeight() - margin) {
        doc.addPage();
        yPos = margin;
        slipsOnCurrentPage = 0;
        currentX = margin;
        // Re-add header for continuation pages
        doc.setFontSize(14); 
        doc.setTextColor(0,0,0);
        doc.text(`Student Credit Vouchers (Batch ID: ${batchId} - Continued)`, pageWidth / 2, yPos, {align: 'center'});
        yPos += 10;
      }

      doc.setLineDashPattern([1, 1], 0); 
      doc.rect(currentX, yPos, slipWidth, slipHeight);
      doc.setLineDashPattern([], 0); 

      const textPadding = 3;
      let textY = yPos + textPadding + 5;

      doc.setFontSize(10);
      doc.setTextColor(0,0,0);
      doc.setFont("helvetica", "bold");
      doc.text("EduCore AI Credit Voucher", currentX + slipWidth / 2, textY, { align: 'center' });
      textY += 7;

      doc.setFont("helvetica", "normal");
      doc.setFontSize(12);
      doc.text(`Code: ${voucher.id}`, currentX + textPadding, textY);
      textY += 7;
      
      doc.setFontSize(10);
      doc.text(`Credits: ${voucher.credits}`, currentX + textPadding, textY);
      textY += 6;

      doc.text(`Expires: ${voucher.expiryDate ? format(parseISO(voucher.expiryDate), 'PP') : 'N/A'}`, currentX + textPadding, textY);
      textY += 6;

      if (voucher.restrictedToClassName) {
          let classInfoText = `For Class: ${voucher.restrictedToClassName}`;
          if (voucher.restrictedToFriendlyClassId) {
              classInfoText += ` (ID: ${voucher.restrictedToFriendlyClassId})`;
          }
          const splitClassText = doc.splitTextToSize(classInfoText, slipWidth - (2 * textPadding) - 2);
          doc.setFontSize(8);
          doc.setTextColor(50,50,50);
          doc.text(splitClassText, currentX + textPadding, textY);
          textY += (splitClassText.length * 3.5) + 2;

          const joinInstruction = `Join on 'Classes' page using the Class ID above.`;
          const splitJoinInstruction = doc.splitTextToSize(joinInstruction, slipWidth - (2 * textPadding) - 2);
          doc.setFontSize(7); 
          doc.setTextColor(60,60,60);
          doc.text(splitJoinInstruction, currentX + textPadding, textY);
      }
      
      doc.setFontSize(8);
      doc.setTextColor(80, 80, 80);
      const redeemYPos = yPos + slipHeight - textPadding - 4; 
      doc.text("Redeem on 'Classes' page.", currentX + slipWidth / 2, redeemYPos, { align: 'center' });

      slipsOnCurrentPage++;
      if (slipsOnCurrentPage % 2 === 0) { 
        currentX = margin;
        yPos += slipHeight + 5; 
      } else { 
        currentX += slipWidth + 5; 
      }
    });
    
    const pdfFileName = `educore_vouchers_batch_${batchId}_${format(generationTimestamp, 'yyyyMMddHHmm')}.pdf`;
    doc.save(pdfFileName);
    toastFunction({ title: "PDF Downloaded", description: `Voucher slips PDF (${pdfFileName}) for Batch ID ${batchId} has been generated.` });
  } catch (error) {
      console.error("Error generating PDF for student slips:", error);
      toastFunction({ variant: "destructive", title: "PDF Error", description: "Could not generate PDF for voucher slips."});
  }
}
