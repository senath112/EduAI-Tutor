
"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { GenerateVouchersFormSchema, type GenerateVouchersFormValues } from '@/lib/schemas';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { createCreditVouchers, type CreditVoucher } from '@/services/voucher-service';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Loader2, TicketPlus, Copy, Download, CalendarClock, CircleDollarSign } from 'lucide-react';
import jsPDF from 'jspdf';
import { format, parseISO } from 'date-fns';

interface GenerateVouchersDialogProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  onVouchersGenerated?: (vouchers: CreditVoucher[]) => void;
}

export default function GenerateVouchersDialog({ 
  isOpen, 
  onOpenChange, 
  onVouchersGenerated 
}: GenerateVouchersDialogProps) {
  const { user, userProfile, refreshUserProfile } = useAuth();
  const { toast } = useToast();
  const [isProcessing, setIsProcessing] = useState(false);
  const [showGeneratedVouchersAlert, setShowGeneratedVouchersAlert] = useState(false);
  const [generatedVouchersList, setGeneratedVouchersList] = useState<CreditVoucher[]>([]);

  const form = useForm<GenerateVouchersFormValues>({
    resolver: zodResolver(GenerateVouchersFormSchema),
    defaultValues: {
      creditsPerVoucher: 10,
      numberOfVouchers: 5,
    },
  });

  const handleDownloadPDF = (vouchersToDownload?: CreditVoucher[]) => {
    const listToUse = vouchersToDownload || generatedVouchersList;
    if (!listToUse || listToUse.length === 0) {
      toast({ variant: "destructive", title: "No Vouchers", description: "No vouchers to download." });
      console.error("handleDownloadPDF called with no vouchers to download.");
      return;
    }
     if (!user || !userProfile) {
      toast({ variant: "destructive", title: "User Error", description: "User information not available for PDF generation." });
      console.error("User or userProfile not available in handleDownloadPDF");
      return;
    }

    try {
      const doc = new jsPDF();
      const generationTimestamp = new Date();
      const teacherDisplayName = userProfile?.displayName || user?.email || "Unknown Teacher";

      doc.setFontSize(18);
      doc.text("EduCore AI - New Voucher Batch", 14, 22);
      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0); 
      doc.text(`Generated By: ${teacherDisplayName}`, 14, 29);
      doc.text(`Generated At: ${format(generationTimestamp, 'PPP p')}`, 14, 36);
      
      doc.setTextColor(100, 100, 100); 

      let yPosition = 48; 
      const lineHeight = 7;
      const pageHeight = doc.internal.pageSize.height;
      const bottomMargin = 20;

      listToUse.forEach((voucher, index) => {
        if (yPosition + (lineHeight * 3) > pageHeight - bottomMargin) { 
          doc.addPage();
          yPosition = 20; 
          doc.setFontSize(14); 
          doc.setTextColor(0,0,0);
          doc.text("New Voucher Batch (Continued)", 14, yPosition);
          yPosition += 15;
          doc.setFontSize(10);
          doc.setTextColor(100,100,100);
        }
        const textLine1 = `${index + 1}. Code: ${voucher.id}`;
        const textLine2 = `     Credits: ${voucher.credits}`;
        const textLine3 = `     Expires: ${voucher.expiryDate ? format(parseISO(voucher.expiryDate), 'PPP p') : 'N/A'}`; 
        
        doc.text(textLine1, 14, yPosition);
        yPosition += lineHeight;
        doc.text(textLine2, 14, yPosition);
        yPosition += lineHeight;
        doc.text(textLine3, 14, yPosition);
        yPosition += lineHeight * 1.5; 
      });

      doc.save(`new_vouchers_${format(generationTimestamp, 'yyyyMMdd_HHmm')}.pdf`);
      toast({ title: "PDF Downloaded", description: "Newly generated voucher codes PDF has been generated." });
      console.log("PDF generation successful.");
    } catch (error) {
        console.error("Error generating PDF:", error);
        toast({ variant: "destructive", title: "PDF Error", description: "Could not generate PDF."});
    }
  };


  const onSubmit = async (values: GenerateVouchersFormValues) => {
    if (!user || !userProfile?.isTeacher) {
      toast({ variant: "destructive", title: "Error", description: "You must be logged in as a teacher." });
      return;
    }
    setIsProcessing(true);

    const totalCreditsRequired = values.creditsPerVoucher * values.numberOfVouchers;
    const currentTeacherCredits = typeof userProfile.credits === 'number' ? userProfile.credits : 0;

    if (currentTeacherCredits < totalCreditsRequired) {
      toast({
        variant: "destructive",
        title: "Insufficient Credits",
        description: `You need ${totalCreditsRequired} credits to generate these vouchers, but you only have ${currentTeacherCredits}.`,
        duration: 7000,
      });
      setIsProcessing(false);
      return;
    }

    try {
      const vouchers = await createCreditVouchers(
        user.uid,
        userProfile.displayName || user.email || "Unknown Teacher",
        values.creditsPerVoucher,
        values.numberOfVouchers
      );
      setGeneratedVouchersList(vouchers);
      setShowGeneratedVouchersAlert(true); 
      
      // Automatically download the PDF
      if (vouchers && vouchers.length > 0) {
        handleDownloadPDF(vouchers);
      }

      if (onVouchersGenerated) {
        onVouchersGenerated(vouchers);
      }
      await refreshUserProfile(); 
      form.reset();
    } catch (error: any) {
      console.error("Error generating vouchers:", error);
      toast({ 
        variant: "destructive", 
        title: "Generation Failed", 
        description: error.message || "Could not generate vouchers.",
        duration: 7000 
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  const handleCopyVoucherCode = (code: string) => {
    navigator.clipboard.writeText(code)
      .then(() => {
        toast({ title: "Copied!", description: `Voucher code ${code} copied.` });
      })
      .catch(err => {
        toast({ variant: "destructive", title: "Copy Failed", description: "Could not copy code." });
      });
  };
  
  const handleCopyAllVoucherCodes = () => {
    if (generatedVouchersList.length === 0) return;
    const allCodesText = generatedVouchersList.map(v => `Code: ${v.id}, Credits: ${v.credits}, Expires: ${v.expiryDate ? format(parseISO(v.expiryDate), 'PP') : 'N/A'}`).join('\n');
    navigator.clipboard.writeText(allCodesText)
      .then(() => {
        toast({ title: "All Codes Copied!", description: "All generated voucher codes and details copied to clipboard." });
      })
      .catch(err => {
        toast({ variant: "destructive", title: "Copy Failed", description: "Could not copy all codes." });
      });
  };


  const closeDialogsAndReset = () => {
    setShowGeneratedVouchersAlert(false);
    onOpenChange(false); 
  };

  const currentTeacherCredits = typeof userProfile?.credits === 'number' ? userProfile.credits : 0;

  return (
    <>
      <Dialog open={isOpen && !showGeneratedVouchersAlert} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <TicketPlus className="h-6 w-6" /> Generate Credit Vouchers
            </DialogTitle>
            <DialogDescription>
              Specify the credit amount for each voucher and how many to create. 
              This will deduct credits from your account. Vouchers expire in 28 days. <br />
              <Badge variant="outline" className="mt-1">
                <CircleDollarSign className="mr-1 h-3.5 w-3.5 text-primary"/> Your Credits: {currentTeacherCredits}
              </Badge>
            </DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-2">
              <FormField
                control={form.control}
                name="creditsPerVoucher"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Credits Per Voucher</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder="e.g., 100" {...field} onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)} disabled={isProcessing} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="numberOfVouchers"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Number of Vouchers to Generate</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder="e.g., 10" {...field} onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)} disabled={isProcessing} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter className="pt-3">
                <Button type="button" variant="outline" onClick={() => onOpenChange(false)} disabled={isProcessing}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isProcessing}>
                  {isProcessing ? <Loader2 className="animate-spin" /> : 'Generate Vouchers'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {showGeneratedVouchersAlert && generatedVouchersList.length > 0 && (
        <AlertDialog open={showGeneratedVouchersAlert} onOpenChange={setShowGeneratedVouchersAlert}>
          <AlertDialogContent className="max-w-lg">
            <AlertDialogHeader>
              <AlertDialogTitle>Vouchers Generated Successfully!</AlertDialogTitle>
              <AlertDialogDescription>
                {generatedVouchersList.length} voucher(s) created with {generatedVouchersList[0]?.credits} credits each.
                They will expire on: {generatedVouchersList[0]?.expiryDate ? format(parseISO(generatedVouchersList[0]?.expiryDate), 'PPP') : 'N/A'}.
                The PDF has been automatically downloaded. You can copy individual codes or re-download below.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <ScrollArea className="my-4 h-[200px] w-full rounded-md border p-3 bg-muted/50">
              <ul className="space-y-2">
                {generatedVouchersList.map((voucher) => (
                  <li key={voucher.id} className="text-sm">
                    <div className="flex items-center justify-between">
                        <span className="font-mono text-primary tracking-wider">{voucher.id}</span>
                        <Button variant="ghost" size="sm" onClick={() => handleCopyVoucherCode(voucher.id)} title="Copy code">
                        <Copy className="h-3.5 w-3.5 mr-1" /> Copy
                        </Button>
                    </div>
                    <div className="text-xs text-muted-foreground flex items-center gap-1">
                        <CircleDollarSign className="h-3 w-3"/> Credits: {voucher.credits}
                    </div>
                    <div className="text-xs text-muted-foreground flex items-center gap-1">
                        <CalendarClock className="h-3 w-3"/> 
                        Expires: {voucher.expiryDate ? format(parseISO(voucher.expiryDate), 'PPp') : 'N/A'}
                    </div>
                  </li>
                ))}
              </ul>
            </ScrollArea>
            <div className="flex flex-col sm:flex-row gap-2">
              <Button type="button" variant="outline" onClick={handleCopyAllVoucherCodes} className="w-full">
                  <Copy className="h-4 w-4 mr-2" /> Copy All Codes
              </Button>
              <Button type="button" variant="outline" onClick={() => handleDownloadPDF()} className="w-full">
                  <Download className="h-4 w-4 mr-2" /> Download as PDF
              </Button>
            </div>
            <AlertDialogFooter className="mt-4">
              <AlertDialogAction onClick={closeDialogsAndReset}>OK</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </>
  );
}
    
